from abc import ABC, abstractmethod
from typing import Any, Mapping

class ProviderError(Exception): ...

class Provider(ABC):
    name: str

    @abstractmethod
    async def provision(self, spec: Mapping[str, Any]) -> Mapping[str, Any]: ...
    @abstractmethod
    async def update(self, resource_id: str, spec: Mapping[str, Any]) -> Mapping[str, Any]: ...
    @abstractmethod
    async def destroy(self, resource_id: str) -> None: ...
    @abstractmethod
    async def cost_estimate(self, spec: Mapping[str, Any]) -> Mapping[str, Any]: ...
    @abstractmethod
    async def validate(self, spec: Mapping[str, Any]) -> None: ...
